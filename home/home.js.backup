/**
 * Home Page JavaScript Module
 * Handles dynamic tab navigation, content loading, and home page interactions
 */

// Wait for DOM and global dependencies
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç DOM Content Loaded');
    
    if (typeof window.KasaKolawole === 'undefined') {
        console.error('‚ùå Global KasaKolawole object not found. Loading global.js...');
        
        // Wait a bit more and try again
        setTimeout(() => {
            if (typeof window.KasaKolawole === 'undefined') {
                console.error('‚ùå Still no KasaKolawole object after timeout');
                // Create basic content as fallback
                document.querySelector('.hero-title').textContent = 'Kasa Kolawole (Debug Mode)';
                document.querySelector('.hero-subtitle').textContent = 'Content loaded in fallback mode';
                return;
            } else {
                console.log('‚úÖ KasaKolawole object found after timeout');
                initHomePage();
            }
        }, 2000);
        return;
    }

    console.log('‚úÖ KasaKolawole object found immediately');
    initHomePage();
});

function initHomePage() {
    // Initialize Home Page
    const homePage = new HomePage();
    homePage.init();
}

/**
 * HomePage Class - Main controller for home page functionality
 */
class HomePage {
    constructor() {
        this.logger = window.KasaKolawole.utils.logger;
        this.http = window.KasaKolawole.http;
        this.storage = window.KasaKolawole.storage;
        this.notifications = window.KasaKolawole.notifications;
        this.dom = window.KasaKolawole.dom;

        // Configuration
        this.config = null;
        this.appConfig = null;
        this.currentTab = 'home';
        this.isLoading = false;
        
        // DOM Elements
        this.elements = {
            loadingOverlay: null,
            mobileMenuToggle: null,
            navList: null,
            navLinks: [],
            tabContents: [],
            userMenuToggle: null,
            userDropdown: null,
            logoutButton: null
        };

        this.logger.info('HomePage', 'HomePage instance created');
    }

    /**
     * Initialize the home page
     */
    async init() {
        try {
            this.logger.info('HomePage', 'Initializing home page...');
            
            // Check authentication
            if (!this.checkAuthentication()) {
                return;
            }

            // Load configurations
            await this.loadConfigurations();
            
            // Initialize DOM elements
            this.initializeDOMElements();
            
            // Setup event listeners
            this.setupEventListeners();
            
            // Initialize dynamic tabs
            await this.initializeTabs();
            
            // Setup user interface
            this.setupUserInterface();
            
            // Hide loading overlay
            this.hideLoading();
            
            this.logger.info('HomePage', 'Home page initialized successfully');
            
        } catch (error) {
            this.logger.error('HomePage', 'Failed to initialize home page:', error);
            
            // Try to show fallback content
            try {
                this.showFallbackContent();
            } catch (fallbackError) {
                console.error('Even fallback failed:', fallbackError);
            }
        }
    }

    /**
     * Show fallback content when initialization fails
     */
    showFallbackContent() {
        console.log('üîÑ Showing fallback content');
        
        // Update basic content
        const heroTitle = document.querySelector('.hero-title');
        if (heroTitle) heroTitle.textContent = 'Welcome to Kasa Kolawole';
        
        const heroSubtitle = document.querySelector('.hero-subtitle');
        if (heroSubtitle) heroSubtitle.textContent = 'Professional Portfolio & Services';
        
        const heroDesc = document.querySelector('.hero-description');
        if (heroDesc) heroDesc.textContent = 'Explore my work and connect for your next project.';
        
        // Add basic navigation
        const navList = document.querySelector('#navList');
        if (navList) {
            navList.innerHTML = `
                <li class="nav-item"><a href="#" class="nav-link active">Home</a></li>
                <li class="nav-item"><a href="#" class="nav-link">About</a></li>
                <li class="nav-item"><a href="#" class="nav-link">Portfolio</a></li>
                <li class="nav-item"><a href="#" class="nav-link">Services</a></li>
                <li class="nav-item"><a href="#" class="nav-link">Contact</a></li>
            `;
        }
        
        // Update section titles
        const sectionTitle = document.querySelector('.section-title');
        if (sectionTitle) sectionTitle.textContent = 'Featured Services';
        
        const introTitle = document.querySelector('.intro-text h2');
        if (introTitle) introTitle.textContent = 'About Me';
        
        // Hide loading overlay
        this.hideLoading();
        
        console.log('‚úÖ Fallback content displayed');
    }

    /**
     * Check user authentication
     */
    checkAuthentication() {
        const user = this.storage.getSessionData('currentUser');
        if (!user) {
            this.logger.warn('HomePage', 'No authenticated user found');
            
            // For testing purposes, create a mock user session
            const mockUser = { username: 'TestUser', timestamp: Date.now() };
            this.storage.setSessionData('currentUser', mockUser);
            this.logger.info('HomePage', 'Created mock user session for testing');
            return true;
            
            // Uncomment below for production
            // window.location.href = '/index.html';
            // return false;
        }
        
        this.logger.info('HomePage', 'User authenticated:', user.username);
        return true;
    }

    /**
     * Load configuration files
     */
    async loadConfigurations() {
        try {
            // Load app configuration
            this.appConfig = await this.http.get('/app.json');
            this.logger.info('HomePage', 'App configuration loaded');

            // Load home page configuration
            this.config = await this.http.get('/home/home.json');
            this.logger.info('HomePage', 'Home configuration loaded');

        } catch (error) {
            this.logger.error('HomePage', 'Failed to load configurations:', error);
            
            // For testing, provide fallback configuration
            this.logger.warn('HomePage', 'Using fallback configuration');
            this.appConfig = {
                navigation: {
                    tabs: [
                        { name: 'home', label: 'Home', icon: 'fas fa-home' },
                        { name: 'about', label: 'About', icon: 'fas fa-user' },
                        { name: 'portfolio', label: 'Portfolio', icon: 'fas fa-briefcase' },
                        { name: 'services', label: 'Services', icon: 'fas fa-cogs' },
                        { name: 'blog', label: 'Blog', icon: 'fas fa-blog' },
                        { name: 'contact', label: 'Contact', icon: 'fas fa-envelope' }
                    ]
                }
            };
            
            this.config = {
                hero: {
                    title: 'Welcome to Kasa Kolawole',
                    subtitle: 'Digital Innovation & Creative Excellence',
                    description: 'Crafting exceptional digital experiences through innovative design, strategic thinking, and cutting-edge technology solutions.',
                    buttons: [
                        { text: 'Explore Portfolio', target: 'portfolio', type: 'primary', icon: 'fas fa-folder-open' },
                        { text: 'Get In Touch', target: 'contact', type: 'outline', icon: 'fas fa-envelope' }
                    ]
                },
                introduction: {
                    title: 'About Me',
                    content: [
                        { type: 'paragraph', text: 'Welcome to my digital space! I\'m Kasa Kolawole, a passionate professional dedicated to creating innovative solutions and meaningful digital experiences.' },
                        { type: 'paragraph', text: 'My journey spans across multiple disciplines, allowing me to approach challenges from unique perspectives and deliver comprehensive solutions that make a real impact.' }
                    ],
                    skills: ['Strategic Planning', 'Creative Design', 'Technical Implementation', 'Project Management', 'Client Relations', 'Innovation Leadership']
                },
                featured: {
                    title: 'What I Offer',
                    items: [
                        { title: 'Creative Design', description: 'Innovative design solutions that capture attention and communicate your message effectively.', icon: 'fas fa-palette' },
                        { title: 'Strategic Consulting', description: 'Expert guidance and strategic planning to help you navigate challenges and achieve objectives.', icon: 'fas fa-chart-line' },
                        { title: 'Digital Solutions', description: 'Custom digital solutions that streamline processes and enhance user experience.', icon: 'fas fa-laptop-code' }
                    ]
                },
                callToAction: {
                    title: 'Ready to Get Started?',
                    description: 'Let\'s collaborate to bring your vision to life.',
                    buttons: [
                        { text: 'Start a Project', target: 'contact', type: 'secondary', icon: 'fas fa-rocket' },
                        { text: 'View My Work', target: 'portfolio', type: 'outline', icon: 'fas fa-eye' }
                    ]
                },
                socialLinks: [
                    { name: 'LinkedIn', url: '#', icon: 'fab fa-linkedin-in' },
                    { name: 'Twitter', url: '#', icon: 'fab fa-twitter' },
                    { name: 'GitHub', url: '#', icon: 'fab fa-github' }
                ],
                contact: {
                    email: 'hello@kasakolawole.com',
                    phone: '+1 (555) 123-4567',
                    location: 'Available Worldwide'
                },
                footer: {
                    company: {
                        name: 'Kasa Kolawole',
                        description: 'Creating exceptional digital experiences through innovation and creativity.'
                    },
                    copyright: '¬© 2025 Kasa Kolawole. All rights reserved.'
                }
            };
        }
    }

    /**
     * Initialize DOM elements
     */
    initializeDOMElements() {
        this.elements.loadingOverlay = document.getElementById('loadingOverlay');
        this.elements.mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
        this.elements.navList = document.querySelector('.nav-list');
        this.elements.navLinks = document.querySelectorAll('.nav-link');
        this.elements.tabContents = document.querySelectorAll('.tab-content');
        this.elements.userMenuToggle = document.querySelector('.user-menu-toggle');
        this.elements.userDropdown = document.querySelector('.user-dropdown');
        this.elements.logoutButton = document.querySelector('[data-action="logout"]');

        this.logger.info('HomePage', 'DOM elements initialized');
    }

    /**
     * Setup event listeners
     */
    setupEventListeners() {
        // Mobile menu toggle
        if (this.elements.mobileMenuToggle) {
            this.elements.mobileMenuToggle.addEventListener('click', () => {
                this.toggleMobileMenu();
            });
        }

        // Navigation links
        this.elements.navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const tabName = link.getAttribute('data-tab');
                if (tabName) {
                    this.switchTab(tabName);
                }
            });
        });

        // User menu toggle
        if (this.elements.userMenuToggle) {
            this.elements.userMenuToggle.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleUserMenu();
            });
        }

        // Logout button
        if (this.elements.logoutButton) {
            this.elements.logoutButton.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleLogout();
            });
        }

        // Close user menu when clicking outside
        document.addEventListener('click', () => {
            this.closeUserMenu();
        });

        // Handle escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeUserMenu();
                this.closeMobileMenu();
            }
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            this.handleResize();
        });

        this.logger.info('HomePage', 'Event listeners setup complete');
    }

    /**
     * Initialize dynamic tabs based on app configuration
     */
    async initializeTabs() {
        if (!this.appConfig || !this.appConfig.navigation || !this.appConfig.navigation.tabs) {
            this.logger.error('HomePage', 'No tabs configuration found');
            return;
        }

        const tabs = this.appConfig.navigation.tabs;
        
        // Generate navigation for dynamic tabs
        this.generateDynamicNavigation(tabs);
        
        // Load default tab content
        await this.switchTab(this.currentTab);
        
        this.logger.info('HomePage', 'Dynamic tabs initialized');
    }

    /**
     * Generate dynamic navigation based on tabs
     */
    generateDynamicNavigation(tabs) {
        if (!this.elements.navList) return;

        // Clear existing navigation
        this.elements.navList.innerHTML = '';
        
        // Add home tab first
        const homeItem = document.createElement('li');
        homeItem.className = 'nav-item';
        homeItem.innerHTML = `
            <a href="#" class="nav-link active" data-tab="home">
                <i class="fas fa-home"></i>
                Home
            </a>
        `;
        this.elements.navList.appendChild(homeItem);
        
        // Add other tabs
        tabs.forEach(tab => {
            if (tab.name === 'home' || tab.name === 'landing') return; // Skip home and landing
            
            const navItem = document.createElement('li');
            navItem.className = 'nav-item';
            
            const navLink = document.createElement('a');
            navLink.href = '#';
            navLink.className = 'nav-link';
            navLink.setAttribute('data-tab', tab.name);
            
            // Add icon if specified
            if (tab.icon) {
                const icon = document.createElement('i');
                icon.className = tab.icon;
                navLink.appendChild(icon);
            }
            
            // Add text
            const text = document.createTextNode(tab.label || tab.name);
            navLink.appendChild(text);
            
            // Add event listener
            navLink.addEventListener('click', (e) => {
                e.preventDefault();
                this.switchTab(tab.name);
            });
            
            navItem.appendChild(navLink);
            this.elements.navList.appendChild(navItem);
        });

        // Re-initialize nav links array
        this.elements.navLinks = document.querySelectorAll('.nav-link');

        this.logger.info('HomePage', 'Dynamic navigation generated');
    }

    /**
     * Switch to a specific tab
     */
    async switchTab(tabName) {
        if (this.isLoading) return;
        
        try {
            this.isLoading = true;
            this.showLoading();
            
            this.logger.info('HomePage', `Switching to tab: ${tabName}`);
            
            // Update navigation state
            this.updateNavigationState(tabName);
            
            // Load tab content
            await this.loadTabContent(tabName);
            
            // Update current tab
            this.currentTab = tabName;
            
            // Close mobile menu if open
            this.closeMobileMenu();
            
        } catch (error) {
            this.logger.error('HomePage', `Failed to switch to tab ${tabName}:`, error);
            this.notifications.show(`Failed to load ${tabName} content`, 'error');
        } finally {
            this.isLoading = false;
            this.hideLoading();
        }
    }

    /**
     * Update navigation active state
     */
    updateNavigationState(activeTab) {
        this.elements.navLinks.forEach(link => {
            const tabName = link.getAttribute('data-tab');
            if (tabName === activeTab) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
    }

    /**
     * Load content for a specific tab
     */
    async loadTabContent(tabName) {
        const tabContentContainer = document.querySelector('.tab-content-container');
        if (!tabContentContainer) {
            throw new Error('Tab content container not found');
        }

        // For home tab, show existing content
        if (tabName === 'home') {
            const homeContent = document.getElementById('homeContent');
            if (homeContent) {
                this.showTabContent('homeContent');
                return;
            }
        }

        // For other tabs, load dynamically
        try {
            // Check if tab directory exists and load content
            const tabConfig = this.appConfig.navigation.tabs.find(tab => tab.name === tabName);
            if (!tabConfig) {
                throw new Error(`Tab configuration not found for: ${tabName}`);
            }

            // Try to load the tab's HTML file
            const tabHtml = await this.loadTabHTML(tabName);
            
            // Create or update tab content
            let tabContent = document.getElementById(`${tabName}Content`);
            if (!tabContent) {
                tabContent = document.createElement('div');
                tabContent.id = `${tabName}Content`;
                tabContent.className = 'tab-content';
                tabContentContainer.appendChild(tabContent);
            }
            
            tabContent.innerHTML = tabHtml;
            
            // Load tab-specific scripts and styles
            await this.loadTabAssets(tabName);
            
            // Show the tab content
            this.showTabContent(`${tabName}Content`);
            
        } catch (error) {
            this.logger.warn('HomePage', `Could not load tab content for ${tabName}, showing placeholder`);
            this.showPlaceholderContent(tabName);
        }
    }

    /**
     * Load HTML content for a tab
     */
    async loadTabHTML(tabName) {
        try {
            const response = await fetch(`/${tabName}/index.html`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return await response.text();
        } catch (error) {
            this.logger.warn('HomePage', `Failed to load HTML for ${tabName}:`, error);
            throw error;
        }
    }

    /**
     * Load CSS and JS assets for a tab
     */
    async loadTabAssets(tabName) {
        // Load CSS
        const existingCSS = document.querySelector(`link[href="/${tabName}/${tabName}.css"]`);
        if (!existingCSS) {
            const cssLink = document.createElement('link');
            cssLink.rel = 'stylesheet';
            cssLink.href = `/${tabName}/${tabName}.css`;
            document.head.appendChild(cssLink);
        }

        // Load JS
        const existingJS = document.querySelector(`script[src="/${tabName}/${tabName}.js"]`);
        if (!existingJS) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = `/${tabName}/${tabName}.js`;
                script.onload = resolve;
                script.onerror = () => {
                    this.logger.warn('HomePage', `Failed to load JS for ${tabName}`);
                    resolve(); // Don't fail the entire process
                };
                document.head.appendChild(script);
            });
        }
    }

    /**
     * Show placeholder content for tabs that haven't been created yet
     */
    showPlaceholderContent(tabName) {
        const tabContentContainer = document.querySelector('.tab-content-container');
        
        let tabContent = document.getElementById(`${tabName}Content`);
        if (!tabContent) {
            tabContent = document.createElement('div');
            tabContent.id = `${tabName}Content`;
            tabContent.className = 'tab-content';
            tabContentContainer.appendChild(tabContent);
        }

        tabContent.innerHTML = `
            <div class="container">
                <div style="text-align: center; padding: 4rem 2rem;">
                    <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); 
                                border-radius: 16px; padding: 3rem; border: 2px dashed #dee2e6; 
                                max-width: 500px; margin: 0 auto;">
                        <i class="fas fa-hammer" style="font-size: 4rem; color: #6c757d; margin-bottom: 1.5rem;"></i>
                        <h2 style="color: #2c3e50; margin-bottom: 1rem; text-transform: capitalize;">${tabName} Page</h2>
                        <p style="color: #6c757d; font-size: 1.1rem; margin-bottom: 2rem;">
                            This page is under construction. Content will be available soon.
                        </p>
                        <button class="btn btn-primary" onclick="history.back()">
                            <i class="fas fa-arrow-left"></i>
                            Go Back
                        </button>
                    </div>
                </div>
            </div>
        `;

        this.showTabContent(`${tabName}Content`);
    }

    /**
     * Show specific tab content and hide others
     */
    showTabContent(contentId) {
        // Hide all tab contents
        this.elements.tabContents = document.querySelectorAll('.tab-content');
        this.elements.tabContents.forEach(content => {
            content.classList.remove('active');
        });

        // Show specified content
        const targetContent = document.getElementById(contentId);
        if (targetContent) {
            targetContent.classList.add('active');
        }
    }

    /**
     * Setup user interface elements
     */
    setupUserInterface() {
        const user = this.storage.getSessionData('currentUser');
        if (user) {
            // Update user name display
            const userNameElement = document.querySelector('.user-name');
            if (userNameElement) {
                userNameElement.textContent = user.username;
            }
        }

        // Populate content from home.json
        this.populateHomeContent();

        // Update footer year
        const yearElement = document.querySelector('.current-year');
        if (yearElement) {
            yearElement.textContent = new Date().getFullYear();
        }
    }

    /**
     * Populate home page content from configuration
     */
    populateHomeContent() {
        if (!this.config) {
            this.logger.warn('HomePage', 'No home configuration found');
            return;
        }

        try {
            // Update page meta data
            this.updatePageMeta();
            
            // Update hero section
            this.updateHeroSection();
            
            // Update introduction section
            this.updateIntroductionSection();
            
            // Update featured section
            this.updateFeaturedSection();
            
            // Update call to action section
            this.updateCallToActionSection();
            
            // Update footer content
            this.updateFooterContent();
            
            // Update social links
            this.updateSocialLinks();

            this.logger.info('HomePage', 'Home content populated successfully');
            
        } catch (error) {
            this.logger.error('HomePage', 'Failed to populate home content:', error);
        }
    }

    /**
     * Update page meta data
     */
    updatePageMeta() {
        if (this.config.meta) {
            const meta = this.config.meta;
            
            // Update title
            if (meta.title) {
                document.title = meta.title;
            }
            
            // Update meta description
            const metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc && meta.description) {
                metaDesc.setAttribute('content', meta.description);
            }
        }
    }

    /**
     * Update hero section content
     */
    updateHeroSection() {
        if (!this.config.hero) return;

        const hero = this.config.hero;
        
        // Update title
        const titleElement = document.querySelector('.hero-title');
        if (titleElement && hero.title) {
            titleElement.textContent = hero.title;
        }
        
        // Update subtitle
        const subtitleElement = document.querySelector('.hero-subtitle');
        if (subtitleElement && hero.subtitle) {
            subtitleElement.textContent = hero.subtitle;
        }
        
        // Update description
        const descElement = document.querySelector('.hero-description');
        if (descElement && hero.description) {
            descElement.textContent = hero.description;
        }
        
        // Update action buttons
        const actionsContainer = document.querySelector('.hero-actions');
        if (actionsContainer && hero.buttons) {
            actionsContainer.innerHTML = '';
            hero.buttons.forEach(button => {
                const btnElement = this.createButtonElement(button);
                actionsContainer.appendChild(btnElement);
            });
        }
    }

    /**
     * Update introduction section content
     */
    updateIntroductionSection() {
        if (!this.config.introduction) return;

        const intro = this.config.introduction;
        
        // Update title
        const titleElement = document.querySelector('.intro-text h2');
        if (titleElement && intro.title) {
            titleElement.textContent = intro.title;
        }
        
        // Update content paragraphs
        const textContainer = document.querySelector('.intro-text');
        if (textContainer && intro.content) {
            // Remove existing paragraphs (keep title)
            const existingParagraphs = textContainer.querySelectorAll('p');
            existingParagraphs.forEach(p => p.remove());
            
            // Add new paragraphs
            intro.content.forEach(content => {
                if (content.type === 'paragraph') {
                    const p = document.createElement('p');
                    p.textContent = content.text;
                    textContainer.appendChild(p);
                }
            });
            
            // Add skills if available
            if (intro.skills && intro.skills.length > 0) {
                const skillsContainer = document.createElement('div');
                skillsContainer.className = 'skills-container';
                skillsContainer.style.marginTop = '1.5rem';
                
                const skillsTitle = document.createElement('h4');
                skillsTitle.textContent = 'Core Skills';
                skillsTitle.style.marginBottom = '1rem';
                skillsContainer.appendChild(skillsTitle);
                
                const skillsList = document.createElement('div');
                skillsList.className = 'skills-list';
                skillsList.style.display = 'flex';
                skillsList.style.flexWrap = 'wrap';
                skillsList.style.gap = '0.5rem';
                
                intro.skills.forEach(skill => {
                    const skillTag = document.createElement('span');
                    skillTag.className = 'skill-tag';
                    skillTag.textContent = skill;
                    skillTag.style.background = 'rgba(44, 62, 80, 0.1)';
                    skillTag.style.padding = '0.25rem 0.75rem';
                    skillTag.style.borderRadius = '20px';
                    skillTag.style.fontSize = '0.875rem';
                    skillTag.style.color = 'var(--primary-color)';
                    skillsList.appendChild(skillTag);
                });
                
                skillsContainer.appendChild(skillsList);
                textContainer.appendChild(skillsContainer);
            }
        }
        
        // Update image caption if available
        const imagePlaceholder = document.querySelector('.image-placeholder p');
        if (imagePlaceholder && intro.image && intro.image.caption) {
            imagePlaceholder.textContent = intro.image.caption;
        }
    }

    /**
     * Update featured section content
     */
    updateFeaturedSection() {
        if (!this.config.featured) return;

        const featured = this.config.featured;
        
        // Update section title
        const titleElement = document.querySelector('.section-title');
        if (titleElement && featured.title) {
            titleElement.textContent = featured.title;
        }
        
        // Update featured cards
        const gridContainer = document.querySelector('.featured-grid');
        if (gridContainer && featured.items) {
            gridContainer.innerHTML = '';
            
            featured.items.forEach((item, index) => {
                const cardElement = this.createFeaturedCard(item, index);
                gridContainer.appendChild(cardElement);
            });
        }
    }

    /**
     * Create a featured card element
     */
    createFeaturedCard(item, index) {
        const card = document.createElement('div');
        card.className = 'featured-card animate__animated animate__fadeInUp';
        card.style.animationDelay = `${(index + 1) * 0.1}s`;
        
        card.innerHTML = `
            <div class="card-icon">
                <i class="${item.icon}"></i>
            </div>
            <h3>${item.title}</h3>
            <p>${item.description}</p>
        `;
        
        // Add click handler for navigation
        if (item.link && item.link.target) {
            card.style.cursor = 'pointer';
            card.addEventListener('click', () => {
                this.switchTab(item.link.target);
            });
        }
        
        return card;
    }

    /**
     * Update call to action section
     */
    updateCallToActionSection() {
        if (!this.config.callToAction) return;

        const cta = this.config.callToAction;
        
        // Update title
        const titleElement = document.querySelector('.cta-content h2');
        if (titleElement && cta.title) {
            titleElement.textContent = cta.title;
        }
        
        // Update description
        const descElement = document.querySelector('.cta-content p');
        if (descElement && cta.description) {
            descElement.textContent = cta.description;
        }
        
        // Update action buttons
        const actionsContainer = document.querySelector('.cta-actions');
        if (actionsContainer && cta.buttons) {
            actionsContainer.innerHTML = '';
            cta.buttons.forEach(button => {
                const btnElement = this.createButtonElement(button);
                actionsContainer.appendChild(btnElement);
            });
        }
    }

    /**
     * Create a button element
     */
    createButtonElement(buttonConfig) {
        const button = document.createElement('a');
        button.href = '#';
        button.className = `btn btn-${buttonConfig.type || 'primary'}`;
        
        if (buttonConfig.target) {
            button.setAttribute('data-tab', buttonConfig.target);
            button.addEventListener('click', (e) => {
                e.preventDefault();
                this.switchTab(buttonConfig.target);
            });
        }
        
        if (buttonConfig.icon) {
            const icon = document.createElement('i');
            icon.className = buttonConfig.icon;
            button.appendChild(icon);
            button.appendChild(document.createTextNode(' '));
        }
        
        button.appendChild(document.createTextNode(buttonConfig.text));
        
        return button;
    }

    /**
     * Update footer content
     */
    updateFooterContent() {
        if (!this.config.footer) return;

        const footer = this.config.footer;
        
        // Update brand name and description
        const brandName = document.querySelector('.footer-brand .brand-name');
        if (brandName && footer.company && footer.company.name) {
            brandName.textContent = footer.company.name;
        }
        
        const brandDesc = document.querySelector('.footer-brand p');
        if (brandDesc && footer.company && footer.company.description) {
            brandDesc.textContent = footer.company.description;
        }
        
        // Update copyright
        const copyright = document.querySelector('.footer-bottom p');
        if (copyright && footer.copyright) {
            copyright.textContent = footer.copyright;
        }
        
        // Update contact info
        if (this.config.contact) {
            const contactInfo = document.querySelector('.contact-info');
            if (contactInfo) {
                contactInfo.innerHTML = `
                    <p><i class="fas fa-envelope"></i> ${this.config.contact.email}</p>
                    <p><i class="fas fa-phone"></i> ${this.config.contact.phone}</p>
                    <p><i class="fas fa-map-marker-alt"></i> ${this.config.contact.location}</p>
                `;
            }
        }
    }

    /**
     * Update social links
     */
    updateSocialLinks() {
        if (!this.config.socialLinks) return;

        const socialContainer = document.querySelector('#socialLinks');
        if (socialContainer) {
            socialContainer.innerHTML = '';
            
            this.config.socialLinks.forEach(social => {
                const link = document.createElement('a');
                link.href = social.url;
                link.className = 'social-link';
                link.target = '_blank';
                link.rel = 'noopener noreferrer';
                link.title = social.name;
                
                const icon = document.createElement('i');
                icon.className = social.icon;
                link.appendChild(icon);
                
                socialContainer.appendChild(link);
            });
        }
    }

    /**
     * Toggle mobile menu
     */
    toggleMobileMenu() {
        if (this.elements.mobileMenuToggle && this.elements.navList) {
            this.elements.mobileMenuToggle.classList.toggle('active');
            this.elements.navList.classList.toggle('show');
        }
    }

    /**
     * Close mobile menu
     */
    closeMobileMenu() {
        if (this.elements.mobileMenuToggle && this.elements.navList) {
            this.elements.mobileMenuToggle.classList.remove('active');
            this.elements.navList.classList.remove('show');
        }
    }

    /**
     * Toggle user menu
     */
    toggleUserMenu() {
        if (this.elements.userDropdown) {
            this.elements.userDropdown.classList.toggle('show');
        }
    }

    /**
     * Close user menu
     */
    closeUserMenu() {
        if (this.elements.userDropdown) {
            this.elements.userDropdown.classList.remove('show');
        }
    }

    /**
     * Handle window resize
     */
    handleResize() {
        // Close mobile menu on desktop
        if (window.innerWidth > 768) {
            this.closeMobileMenu();
        }
    }

    /**
     * Handle user logout
     */
    handleLogout() {
        try {
            this.logger.info('HomePage', 'User logout initiated');
            
            // Clear session data
            this.storage.clearSession();
            
            // Show logout message
            this.notifications.show('Logged out successfully', 'success');
            
            // Redirect to login page
            setTimeout(() => {
                window.location.href = '/index.html';
            }, 1000);
            
        } catch (error) {
            this.logger.error('HomePage', 'Logout failed:', error);
            this.notifications.show('Logout failed. Please try again.', 'error');
        }
    }

    /**
     * Show loading overlay
     */
    showLoading() {
        if (this.elements.loadingOverlay) {
            this.elements.loadingOverlay.style.display = 'flex';
        }
    }

    /**
     * Hide loading overlay
     */
    hideLoading() {
        if (this.elements.loadingOverlay) {
            this.elements.loadingOverlay.style.display = 'none';
        }
    }
}

// Export for global access
window.KasaKolawole = window.KasaKolawole || {};
window.KasaKolawole.HomePage = HomePage;